// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}
// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? 
    access_token      String? 
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? 
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String
    password      String?
    accounts      Account[]
    organisations Members[]
    ownedOrganisations Organisation[]
}


enum Role {
    admin
    user
    manager
}

enum  Permissions {
    EDIT_ORG
    KICK_USERS
    CHANGE_ROLES
}

model Organisation {
    id String @id @default(cuid())
    name String
    description String
    bannerImg String
    ownerId String
    owner User @relation(fields: [ownerId], references: [id])
    members Members[]
    createdOn DateTime @default(now())
    code String @unique  
}

model Members {
    id String @id @default(cuid())
    userId String
    organisationId String
    user User @relation(fields: [userId], references: [id])
    organisation Organisation @relation(fields: [organisationId], references: [id])
    role Role
    joinedOn DateTime @default(now())
    permissions Permissions[]

    @@unique([userId, organisationId])
}

model VerificationToken {
    id String @id @default(cuid())
    email     String
    token     String   @unique
    expires    DateTime

    @@unique([email, token])
}

model ResetPassToken {
    id String @id @default(cuid())
    email     String
    token     String   @unique
    expires    DateTime

    @@unique([email, token])
}